version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aegisum_postgres
    environment:
      POSTGRES_DB: aegisum
      POSTGRES_USER: aegisum_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aegisum_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - aegisum_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aegisum_user -d aegisum"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aegisum_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-aegisum_redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aegisum_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: aegisum_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: aegisum
      DB_USER: aegisum_user
      DB_PASSWORD: ${DB_PASSWORD:-aegisum_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-aegisum_redis}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TON_API_KEY: ${TON_API_KEY}
      AEGT_JETTON_ADDRESS: ${AEGT_JETTON_ADDRESS}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aegisum_network
    restart: unless-stopped
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React App)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
    container_name: aegisum_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - aegisum_network
    restart: unless-stopped

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aegisum_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - aegisum_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  nginx_logs:

networks:
  aegisum_network:
    driver: bridge