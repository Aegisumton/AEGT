{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nimport { jsx } from \"react/jsx-runtime\";\nimport { createContext, memo, useContext, useCallback, useEffect, useState, useMemo } from \"react\";\nimport { TonConnectUI, TonConnectUIError, toUserFriendlyAddress, CHAIN } from \"@tonconnect/ui\";\nexport * from \"@tonconnect/ui\";\nfunction isClientSide() {\n  return typeof window !== \"undefined\";\n}\nfunction isServerSide() {\n  return !isClientSide();\n}\nconst TonConnectUIContext = createContext(null);\nlet tonConnectUI = null;\nconst TonConnectUIProvider = _a => {\n  var _b = _a,\n    {\n      children\n    } = _b,\n    options = __objRest(_b, [\"children\"]);\n  if (isClientSide() && !tonConnectUI) {\n    tonConnectUI = new TonConnectUI(options);\n  }\n  return /* @__PURE__ */jsx(TonConnectUIContext.Provider, {\n    value: tonConnectUI,\n    children\n  });\n};\nconst TonConnectUIProvider$1 = memo(TonConnectUIProvider);\nclass TonConnectUIReactError extends TonConnectUIError {\n  constructor() {\n    super(...arguments);\n    Object.setPrototypeOf(this, TonConnectUIReactError.prototype);\n  }\n}\nclass TonConnectProviderNotSetError extends TonConnectUIReactError {\n  constructor() {\n    super(...arguments);\n    Object.setPrototypeOf(this, TonConnectProviderNotSetError.prototype);\n  }\n}\nfunction checkProvider(provider) {\n  if (!provider) {\n    throw new TonConnectProviderNotSetError(\"You should add <TonConnectUIProvider> on the top of the app to use TonConnect\");\n  }\n  return true;\n}\nfunction useTonConnectUI() {\n  const tonConnectUI2 = useContext(TonConnectUIContext);\n  const setOptions = useCallback(options => {\n    if (tonConnectUI2) {\n      tonConnectUI2.uiOptions = options;\n    }\n  }, [tonConnectUI2]);\n  if (isServerSide()) {\n    return [null, () => {}];\n  }\n  checkProvider(tonConnectUI2);\n  return [tonConnectUI2, setOptions];\n}\nconst buttonRootId = \"ton-connect-button\";\nconst TonConnectButton = _ref => {\n  let {\n    className,\n    style\n  } = _ref;\n  const [_, setOptions] = useTonConnectUI();\n  useEffect(() => {\n    setOptions({\n      buttonRootId\n    });\n    return () => setOptions({\n      buttonRootId: null\n    });\n  }, [setOptions]);\n  return /* @__PURE__ */jsx(\"div\", {\n    id: buttonRootId,\n    className,\n    style: __spreadValues({\n      width: \"fit-content\"\n    }, style)\n  });\n};\nconst TonConnectButton$1 = memo(TonConnectButton);\nfunction useTonWallet() {\n  const [tonConnectUI2] = useTonConnectUI();\n  const [wallet, setWallet] = useState((tonConnectUI2 == null ? void 0 : tonConnectUI2.wallet) || null);\n  useEffect(() => {\n    if (tonConnectUI2) {\n      setWallet(tonConnectUI2.wallet);\n      return tonConnectUI2.onStatusChange(value => {\n        setWallet(value);\n      });\n    }\n  }, [tonConnectUI2]);\n  return wallet;\n}\nfunction useTonAddress() {\n  let userFriendly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const wallet = useTonWallet();\n  return useMemo(() => {\n    if (wallet) {\n      return userFriendly ? toUserFriendlyAddress(wallet.account.address, wallet.account.chain === CHAIN.TESTNET) : wallet.account.address;\n    } else {\n      return \"\";\n    }\n  }, [wallet, userFriendly, wallet == null ? void 0 : wallet.account.address, wallet == null ? void 0 : wallet.account.chain]);\n}\nfunction useTonConnectModal() {\n  const [tonConnectUI2] = useTonConnectUI();\n  const [state, setState] = useState((tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.state) || null);\n  useEffect(() => {\n    if (tonConnectUI2) {\n      setState(tonConnectUI2.modal.state);\n      return tonConnectUI2.onModalStateChange(value => {\n        setState(value);\n      });\n    }\n  }, [tonConnectUI2]);\n  return {\n    state,\n    open: () => tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.open(),\n    close: () => tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.close()\n  };\n}\nfunction useIsConnectionRestored() {\n  const [restored, setRestored] = useState(false);\n  const [tonConnectUI2] = useTonConnectUI();\n  useEffect(() => {\n    if (tonConnectUI2) {\n      tonConnectUI2.connectionRestored.then(() => setRestored(true));\n    }\n  }, [tonConnectUI2]);\n  return restored;\n}\nexport { TonConnectButton$1 as TonConnectButton, TonConnectProviderNotSetError, TonConnectUIContext, TonConnectUIProvider$1 as TonConnectUIProvider, TonConnectUIReactError, useIsConnectionRestored, useTonAddress, useTonConnectModal, useTonConnectUI, useTonWallet };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}