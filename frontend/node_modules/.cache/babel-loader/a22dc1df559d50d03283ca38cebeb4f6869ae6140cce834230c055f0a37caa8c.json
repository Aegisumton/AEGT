{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{useTonConnectUI}from'@tonconnect/ui-react';import{toast}from'react-hot-toast';import{authAPI,api}from'../services/api';import{useAuth}from'./useAuth';const useTonConnect=()=>{const[tonConnectUI]=useTonConnectUI();const[isConnected,setIsConnected]=useState(false);const[walletAddress,setWalletAddress]=useState(null);const[isConnecting,setIsConnecting]=useState(false);const{updateUser}=useAuth();// Check connection status\nuseEffect(()=>{if(tonConnectUI.connected){var _tonConnectUI$account;setIsConnected(true);setWalletAddress((_tonConnectUI$account=tonConnectUI.account)===null||_tonConnectUI$account===void 0?void 0:_tonConnectUI$account.address);}else{setIsConnected(false);setWalletAddress(null);}},[tonConnectUI.connected,tonConnectUI.account]);// Generate authentication challenge\nconst generateChallenge=useCallback(async walletAddress=>{try{const response=await authAPI.walletChallenge({walletAddress});return response.data;}catch(error){console.error('Failed to generate challenge:',error);throw error;}},[]);// Sign challenge with wallet (simplified approach)\nconst signChallenge=useCallback(async challenge=>{try{// For now, we'll use the wallet address as proof of ownership\n// The challenge system provides security against replay attacks\nconst signature=\"\".concat(tonConnectUI.account.address,\"_\").concat(challenge,\"_\").concat(Date.now());return signature;}catch(error){console.error('Failed to sign challenge:',error);throw error;}},[tonConnectUI]);// Connect wallet and authenticate\nconst connectWallet=useCallback(async()=>{try{setIsConnecting(true);// Check if wallet is already connected\nif(!tonConnectUI.connected){// Connect to wallet only if not already connected\nawait tonConnectUI.connectWallet();if(!tonConnectUI.connected){throw new Error('Failed to connect wallet');}}const address=tonConnectUI.account.address;// Generate challenge\nconst{challenge}=await generateChallenge(address);// Sign challenge\nconst signature=await signChallenge(challenge);// Verify with backend and get auth token\nconst response=await authAPI.walletVerify({walletAddress:address,signature,challenge});// Set auth token and user data\nif(response.data.token){localStorage.setItem('authToken',response.data.token);api.defaults.headers.common['Authorization']=\"Bearer \".concat(response.data.token);// Use the auth login function to properly set authentication state\nif(response.data.user){// Manually set the user and authentication state\nupdateUser(response.data.user);// We need to trigger the auth state update\nwindow.dispatchEvent(new Event('wallet-auth-success'));}}toast.success('Wallet connected successfully!');return response.data;}catch(error){console.error('Wallet connection failed:',error);toast.error('Failed to connect wallet. Please try again.');throw error;}finally{setIsConnecting(false);}},[tonConnectUI,generateChallenge,signChallenge,updateUser]);// Connect wallet to existing account\nconst connectWalletToAccount=useCallback(async()=>{try{setIsConnecting(true);if(!tonConnectUI.connected){await tonConnectUI.connectWallet();}const address=tonConnectUI.account.address;// Generate challenge\nconst{challenge}=await generateChallenge(address);// Sign challenge\nconst signature=await signChallenge(challenge);// Connect to existing account\nconst response=await authAPI.walletConnect({walletAddress:address,signature,challenge});toast.success('Wallet connected to your account!');return response.data;}catch(error){console.error('Wallet connection failed:',error);toast.error('Failed to connect wallet to account.');throw error;}finally{setIsConnecting(false);}},[tonConnectUI,generateChallenge,signChallenge]);// Disconnect wallet\nconst disconnectWallet=useCallback(async()=>{try{await tonConnectUI.disconnect();setIsConnected(false);setWalletAddress(null);toast.success('Wallet disconnected');}catch(error){console.error('Failed to disconnect wallet:',error);toast.error('Failed to disconnect wallet');}},[tonConnectUI]);// Send TON transaction\nconst sendTransaction=useCallback(async transaction=>{try{if(!tonConnectUI.connected){throw new Error('Wallet not connected');}const result=await tonConnectUI.sendTransaction(transaction);return result;}catch(error){console.error('Transaction failed:',error);throw error;}},[tonConnectUI]);return{isConnected,walletAddress,isConnecting,connectWallet,connectWalletToAccount,disconnectWallet,sendTransaction,tonConnectUI};};export{useTonConnect};export default useTonConnect;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}