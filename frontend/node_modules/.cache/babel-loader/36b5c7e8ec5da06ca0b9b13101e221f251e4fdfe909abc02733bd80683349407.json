{"ast":null,"code":"import React,{useEffect,useState}from'react';import{BrowserRouter as Router,Routes,Route,Navigate}from'react-router-dom';import{useTonConnectUI}from'@tonconnect/ui-react';import{motion,AnimatePresence}from'framer-motion';import{toast}from'react-hot-toast';// Components\nimport Layout from'./components/Layout';import LoadingScreen from'./components/LoadingScreen';import MiningDashboard from'./pages/MiningDashboard';import UpgradeShop from'./pages/UpgradeShop';import Wallet from'./pages/Wallet';import Settings from'./pages/Settings';// Hooks\nimport{useTelegramWebApp}from'./hooks/useTelegramWebApp';import{useAuth}from'./hooks/useAuth';// Services\nimport{initializeUser}from'./services/api';// Styles\nimport'./styles/App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[isLoading,setIsLoading]=useState(true);const[isInitialized,setIsInitialized]=useState(false);const[tonConnectUI]=useTonConnectUI();const{webApp,user:tgUser}=useTelegramWebApp();const{user,login,isAuthenticated}=useAuth();useEffect(()=>{let initTimeout;const initializeApp=async()=>{try{// Wait for Telegram WebApp to be ready, but with timeout\nif(!webApp||!tgUser){// If we've been waiting too long, try with fallback data\nif(!initTimeout){initTimeout=setTimeout(()=>{console.warn('Telegram WebApp not ready, using fallback initialization');initializeWithFallback();},5000);// 5 second timeout\n}return;}// Clear timeout if we got the data\nif(initTimeout){clearTimeout(initTimeout);initTimeout=null;}// Initialize user in backend\nconst initData={telegramId:tgUser.id,username:tgUser.username||'user',firstName:tgUser.first_name||'User',languageCode:tgUser.language_code||'en'};// Only include lastName if it has a value\nif(tgUser.last_name&&tgUser.last_name.trim()){initData.lastName=tgUser.last_name;}const userData=await initializeUser(initData);// Login user\nawait login(userData);setIsInitialized(true);toast.success('Welcome to Aegisum!');}catch(error){console.error('Failed to initialize app:',error);toast.error('Failed to initialize app. Please try again.');// Try fallback initialization\ninitializeWithFallback();}finally{setIsLoading(false);}};const initializeWithFallback=async()=>{try{console.log('Attempting fallback initialization...');// Try to get user data from URL parameters (Telegram WebApp sometimes passes data this way)\nconst urlParams=new URLSearchParams(window.location.search);const tgWebAppData=urlParams.get('tgWebAppData');let fallbackUser={id:Date.now(),// Use timestamp as fallback ID\nusername:'user'+Date.now().toString().slice(-6),first_name:'User',last_name:'',language_code:'en'};// If we have Telegram data in URL, try to parse it\nif(tgWebAppData){try{const decodedData=decodeURIComponent(tgWebAppData);const userData=JSON.parse(decodedData);if(userData.user){fallbackUser=userData.user;}}catch(e){console.warn('Could not parse Telegram WebApp data from URL');}}// Initialize user in backend\nconst initData={telegramId:fallbackUser.id,username:fallbackUser.username,firstName:fallbackUser.first_name,languageCode:fallbackUser.language_code||'en'};// Only include lastName if it has a value\nif(fallbackUser.last_name&&fallbackUser.last_name.trim()){initData.lastName=fallbackUser.last_name;}const userData=await initializeUser(initData);// Login user\nawait login(userData);setIsInitialized(true);toast.success('Welcome to Aegisum!');}catch(error){console.error('Fallback initialization failed:',error);toast.error('Failed to initialize app. Please try again.');}finally{setIsLoading(false);}};// Start initialization\nif(webApp||tgUser){initializeApp();}else{// If no Telegram data available, start timeout immediately\ninitTimeout=setTimeout(()=>{console.warn('No Telegram WebApp detected, using fallback');initializeWithFallback();},2000);// 2 second timeout for fallback\n}// Cleanup\nreturn()=>{if(initTimeout){clearTimeout(initTimeout);}};},[webApp,tgUser,login]);// Show loading screen while initializing\nif(isLoading||!isInitialized){return/*#__PURE__*/_jsx(LoadingScreen,{});}// Redirect to mining dashboard if not authenticated\nif(!isAuthenticated){return/*#__PURE__*/_jsxs(\"div\",{className:\"error-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Authentication Required\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Please open this app through Telegram.\"})]});}return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsx(AnimatePresence,{mode:\"wait\",children:/*#__PURE__*/_jsx(Routes,{children:/*#__PURE__*/_jsxs(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Layout,{}),children:[/*#__PURE__*/_jsx(Route,{index:true,element:/*#__PURE__*/_jsx(Navigate,{to:\"/mining\",replace:true})}),/*#__PURE__*/_jsx(Route,{path:\"/mining\",element:/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:-20},transition:{duration:0.3},children:/*#__PURE__*/_jsx(MiningDashboard,{})})}),/*#__PURE__*/_jsx(Route,{path:\"/upgrade\",element:/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:-20},transition:{duration:0.3},children:/*#__PURE__*/_jsx(UpgradeShop,{})})}),/*#__PURE__*/_jsx(Route,{path:\"/wallet\",element:/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:-20},transition:{duration:0.3},children:/*#__PURE__*/_jsx(Wallet,{})})}),/*#__PURE__*/_jsx(Route,{path:\"/settings\",element:/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},exit:{opacity:0,y:-20},transition:{duration:0.3},children:/*#__PURE__*/_jsx(Settings,{})})})]})})})})});}export default App;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}