{"ast":null,"code":"import _objectSpread from\"/home/daimond/AEGT/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,createContext,useContext}from'react';import{toast}from'react-hot-toast';import{api}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// Check for existing session\nconst checkAuth=async()=>{try{const token=localStorage.getItem('authToken');if(token){api.defaults.headers.common['Authorization']=\"Bearer \".concat(token);const response=await api.get('/auth/me');setUser(response.data.user);setIsAuthenticated(true);}}catch(error){console.error('Auth check failed:',error);localStorage.removeItem('authToken');delete api.defaults.headers.common['Authorization'];}finally{setIsLoading(false);}};checkAuth();},[]);const login=async userData=>{try{setIsLoading(true);const response=await api.post('/auth/login',userData);const{user,token}=response.data;localStorage.setItem('authToken',token);api.defaults.headers.common['Authorization']=\"Bearer \".concat(token);setUser(user);setIsAuthenticated(true);return user;}catch(error){console.error('Login failed:',error);toast.error('Login failed. Please try again.');throw error;}finally{setIsLoading(false);}};const logout=()=>{localStorage.removeItem('authToken');delete api.defaults.headers.common['Authorization'];setUser(null);setIsAuthenticated(false);toast.success('Logged out successfully');};const updateUser=userData=>{setUser(prev=>_objectSpread(_objectSpread({},prev),userData));};const value={user,isAuthenticated,isLoading,login,logout,updateUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}